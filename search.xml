<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDEA和Eclipse中常用的快捷键</title>
    <url>/2020/07/04/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Idea中的常用快捷键</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>功能</th>
<th>IDEA快捷键</th>
<th>Eclipse快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>自动代码补全</td>
<td>Basic模式:Ctrl+空格<br/>智能模式:Ctrl+Shift+空格</td>
<td>Alt+/</td>
</tr>
<tr>
<td>自动代码生成</td>
<td>Alt+Insert</td>
<td></td>
</tr>
<tr>
<td>搜索类</td>
<td>Ctrl+N</td>
<td>Ctrl+Shift+T</td>
</tr>
<tr>
<td>删除当前行</td>
<td>Ctrl+X</td>
<td>Ctrl+D</td>
</tr>
<tr>
<td>跟进代码和方法</td>
<td>Ctrl+B</td>
<td>F3</td>
</tr>
<tr>
<td>查看继承及重写</td>
<td>Ctrl+Shift+B</td>
<td></td>
</tr>
<tr>
<td>代码模板</td>
<td>Ctrl+J</td>
<td></td>
</tr>
<tr>
<td>最近编辑文件</td>
<td>Ctrl+E</td>
<td></td>
</tr>
<tr>
<td>提示方法参数</td>
<td>Ctrl+P</td>
<td></td>
</tr>
<tr>
<td>跳转最近编辑内容</td>
<td>Ctrl+Shift+Backspace</td>
<td>Alt+左右箭头</td>
</tr>
<tr>
<td>查看方法、类说明</td>
<td>Ctrl+Q</td>
<td></td>
</tr>
<tr>
<td>搜索文件</td>
<td>Ctrl+Shift+N</td>
<td>Ctrl+Shift+T</td>
</tr>
<tr>
<td>覆盖父类方法</td>
<td>Ctrl+O</td>
<td></td>
</tr>
<tr>
<td>方法调用</td>
<td>Ctrl+Alt+H</td>
<td>Ctrl+Alt+H</td>
</tr>
<tr>
<td>格式化代码</td>
<td>Ctrl+Alt+L</td>
<td>Ctrl+Shift+F</td>
</tr>
<tr>
<td>整理import</td>
<td>Ctrl+Alt+O</td>
<td>Ctrl+Shift+O</td>
</tr>
<tr>
<td>快速修复错误</td>
<td>Alt+Enter</td>
<td>Ctrl+1</td>
</tr>
<tr>
<td>切换窗口</td>
<td>Ctrl+Tab</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
        <tag>IDE</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基础</title>
    <url>/2020/07/05/SpringBoot%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>SpringBoot基础</p>
<a id="more"></a>
<h1 id="了解SpringBoot"><a href="#了解SpringBoot" class="headerlink" title="了解SpringBoot"></a><strong><em>了解SpringBoot</em></strong></h1><h2 id="了解SpringBoot项目结构"><a href="#了解SpringBoot项目结构" class="headerlink" title="了解SpringBoot项目结构"></a>了解SpringBoot项目结构</h2><p>(1)src/main/java: 入口(启动)类及程序的开发目录。在这个目录下进行业务开发、创建实体层、控制器层、数据连接层等。<br>(2)src/main/resources:资源文件目录，主要用于存放静态文件和配置文件<br>•static:用于存放静态资源，如层级样式表CSS文件、JavaScript文件、图片等。<br>•templates:用于存放模板文件<br>•application.properties：用于配置项目运行所需的配置数据。如果用YAML方式管理配置，则YAML文件也放在这个目录中。<br>(3)src/test/java:测试程序所在的目录</p>
<h2 id="了解SpringBoot的入口类"><a href="#了解SpringBoot的入口类" class="headerlink" title="了解SpringBoot的入口类"></a>了解SpringBoot的入口类</h2><p>创建如下入口类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.pro;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(App.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;从上述代码可以看到,加上注解@SpringBootApplication，以标注这是SpringBoot项目的入口类。<br>&nbsp;&nbsp;在入口类中有一个“main”方法，其中使用了SpringApplication的静态“run”方法，并将“APP”类和”main方法的参数“arg”传递了进去，以启动“APP”类。</p>
<h2 id="了解SpringBoot的自动配置"><a href="#了解SpringBoot的自动配置" class="headerlink" title="了解SpringBoot的自动配置"></a>了解SpringBoot的自动配置</h2><p>&nbsp;&nbsp;Spring Boot 会根据配置的依赖信息进行自动配置，从而减轻开发者搭建环境和配置的负担。如果在项目中依赖了spring-boot-starter-web，则Spring Boot会自动配置Web环境(配置Tomcat、WebMVC、Validator、JSON等)。<br>&nbsp;&nbsp;Spring Boot 自动配置是通过注解@EnableAutoConfiguration来实现的，具有非侵入性。如果要查看当前有哪些自动配置，则可以使用下方的“debug”调试命令。<br><code>java -jar*.jar -debug</code><br>&nbsp;&nbsp;如果在IDEA中进行开发，则可以单机”run→EditConfigurations”命令，在弹出的窗口中</p>
<h2 id="了解SpringBoot的热部署"><a href="#了解SpringBoot的热部署" class="headerlink" title="了解SpringBoot的热部署"></a>了解SpringBoot的热部署</h2><p>Spring Boot热部署是为了更好地支持调试，在项目进行修改之后不需要耗费时间重启，在应用程序正运行的情况下即可实时生效，以节约时间和操作。要实现热部署，则需要添加下方的热部署的依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframeword.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;该依赖在项目打包时会被禁用，如果用”java -jar”命令启动应用程序，或使用一个特定的classloader启动应用程序，则Spring Boot会认为这是一个”生产环境”，所以不会运行。如果项目中使用了Redis作为缓存，则请禁止使用热部署，以免出现类型转换问题。</p>
<h2 id="定制启动画面"><a href="#定制启动画面" class="headerlink" title="定制启动画面"></a>定制启动画面</h2><p>1.自定义Banner<br>2.设置颜色<br>3.关闭Banner<br>————————————</p>
<h1 id="SpringBoot的常用注解"><a href="#SpringBoot的常用注解" class="headerlink" title="SpringBoot的常用注解"></a><strong><em>SpringBoot的常用注解</em></strong></h1><h2 id="什么是注解式编程"><a href="#什么是注解式编程" class="headerlink" title="什么是注解式编程"></a>什么是注解式编程</h2><p>&nbsp;&nbsp;注解(annotations)用来定义一个类、属性或者一些方法，以便程序能被编译处理。它相当于一个说明文件，告诉应用程序某个被注解的类或属性是什么，要怎么处理。注解可以用于标注包、类、方法和变量等。<br>&nbsp;&nbsp;下方代码中的注解@RestController，是一个用来定义Rest风格的控制器。其中，注解@GetMapping(“/hello”)定义的访问路径是”/hello”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class Hello&#123;</span><br><span class="line">	@GetMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">	public String hello() throws Exception&#123;</span><br><span class="line">	          return &quot;Hello ,Spring Boot!&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="了解系统注解"><a href="#了解系统注解" class="headerlink" title="了解系统注解"></a>了解系统注解</h2><table>
<thead>
<tr>
<th align="left">注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Override</td>
<td>用于修饰方法,表示此方法重写了父类的方法</td>
</tr>
<tr>
<td align="left">@Deprecad</td>
<td>用于修饰方法,表示此方法已经过时。经常在版本升级后会遇到</td>
</tr>
<tr>
<td align="left">@SupressWarnnings</td>
<td>告诉编辑器忽视某类编译警告</td>
</tr>
</tbody></table>
<p>&nbsp;&nbsp;下面重点介绍以下@SupressWarnnings注解。它有以下几种属性<br>•unchecked:未检查的转化。<br>•unused:未使用的变量。<br>•resource:泛型，即未指定类型。<br>•path:在类中的路径。原文件路径中有不存在的路径。<br>•deprecation:使用了某些不赞成使用的类和方法。<br>•fallthrogh:switch语句执行到底，不会遇到break关键字。<br>•serial:实现了Serializable，但未定义serialVersionUID。<br>•rawtypes:没有传递带有泛型的参数。<br>•all:代表全部类型的警告</p>
<h2 id="SpringBoot的常用注解-1"><a href="#SpringBoot的常用注解-1" class="headerlink" title="SpringBoot的常用注解"></a>SpringBoot的常用注解</h2><p>1.使用在类名上的注解</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>使用位置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@RestController</td>
<td>类名上</td>
<td>作用相当于@ResponseBody加@Controller</td>
</tr>
<tr>
<td>@Controller</td>
<td>类名上</td>
<td>声明此类是一个SpringMVC Controller对象</td>
</tr>
<tr>
<td>@Service</td>
<td>类名上</td>
<td>声明一个业务处理类(实现非接口类)</td>
</tr>
<tr>
<td>@Repository</td>
<td>类名上</td>
<td>声明数据访问类(实现非接口类)</td>
</tr>
<tr>
<td>@Component</td>
<td>类名上</td>
<td>代表其是Spring管理类，常用在无法用@Service、@Repository描述的Spring管理类上，相当于通用的注解</td>
</tr>
<tr>
<td>@Configuratioin</td>
<td>类名上</td>
<td>声明此类是一个配置类，常与@Bean配合使用</td>
</tr>
<tr>
<td>@Resource</td>
<td>类名上、属性或构造函数参数上</td>
<td>默认按ByName自动注入</td>
</tr>
<tr>
<td>@Autowired</td>
<td>类名上、属性或构造函数参数上</td>
<td>默认按ByType自动注入</td>
</tr>
<tr>
<td>@RequestMapping</td>
<td>类名或方法上</td>
<td>如果用在类上，则表示所有响应请求的方法都是以该地址作为父路径的</td>
</tr>
<tr>
<td>@Transaction</td>
<td>类名或方法上</td>
<td>用于处理事务</td>
</tr>
<tr>
<td>@Qualifier</td>
<td>类名或属性上</td>
<td>未Bean指定名称，随后再通过名字引用Bean</td>
</tr>
</tbody></table>
<p>下面进一步讲解各个注解的知识点和用法。<br>2.使用在方法上的注解</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>使用位置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@RequestBody</td>
<td>方法参数前</td>
<td>常用来处理application/json、application/xml等Content-Type类型的数据，意味着HTTP消息是JSON/XML格式，需将其转化为指定类型的参数</td>
</tr>
<tr>
<td>@PathVariable</td>
<td>方法参数前</td>
<td>将URL获取的参数映射到方法参数上</td>
</tr>
<tr>
<td>@Bean</td>
<td>方法上</td>
<td>声明该方法的返回结果是一个由Spring容器管理的Bean</td>
</tr>
<tr>
<td>@ResponseBody</td>
<td>方法上</td>
<td>通过适当的HttpMessageConverter将控制器中方法返回的对象转化为指定格式(JSON/XML)后,写入Response对象的body数据区</td>
</tr>
</tbody></table>
<p>3.其他注解</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>使用位置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@EnableAutoConfiguration</td>
<td>入口类/类名上</td>
<td>用来提供自动配置</td>
</tr>
<tr>
<td>@SpringBootApplication</td>
<td>入口类/类名上</td>
<td>用来启动入口类Application</td>
</tr>
<tr>
<td>@EnableScheduling</td>
<td>入口类/类名上</td>
<td>用来开启计划任务。Spring通过@Scheduled支持多种类型的计划任务，包括cron、fixDelay、fixRate等</td>
</tr>
<tr>
<td>@EnableAsync</td>
<td>入口类/类名上</td>
<td>用来开启异步注解功能</td>
</tr>
<tr>
<td>@ComponentScan</td>
<td>入口类/类名上</td>
<td>用来扫描组件，可自动发现和装配一些Bean。它根据定义的扫描路径，把符合扫描规则的类装配到Spring容器中，告诉Spring哪个包(package)的类会被Spring自动扫描并且装入IoC容器。它对应XML配置中的元素。可以通过basePackage等属性来细粒度地定制自动扫描的范围，默认会声明@ComponentScan所在类的包进行扫描</td>
</tr>
<tr>
<td>@Aspec</td>
<td>入口类/类名上</td>
<td>标注切面，可以用来配置事务、日志、权限验证，在用户请求时做一些处理等</td>
</tr>
<tr>
<td>@ControllerAdvice</td>
<td>类名上</td>
<td>包含@Component，可以被扫描到。统一处理异常</td>
</tr>
<tr>
<td>@ExceptionHandler</td>
<td>方法上</td>
<td>用在方法上，表示遇到这个异常就执行该方法</td>
</tr>
<tr>
<td>@Value</td>
<td>属性上</td>
<td>用于获取配置文件中的值</td>
</tr>
</tbody></table>
<p>————————————</p>
<h1 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a><strong><em>使用配置文件</em></strong></h1><p>&nbsp;&nbsp;SpringBoot支持使用Properties和YAML两种配置方式。两者功能类似，都能完成SpringBoot的配置，但是Properties的优先级要高于YAML(YAML语言的文件以”.yml”为后缀)。<br>&nbsp;&nbsp;YAML文件的好处是——它采用的是树状结构，一目了然。但是，使用YAML配置方式时要注意以下几点。<br>•原来以”.”分隔的key会变成树状结构。例如，”server.port=8080”会变成:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:		</span><br><span class="line">  port:8080</span><br></pre></td></tr></table></figure>
<p>•在key后的冒号后一定要跟一个空格，如”port: 8080”。<br>•如果把原有的application.properties删除,则建议执行一下”maven -X clean install”命令。<br>•YAML格式不支持用注解@PropertySource导入配置</p>
<h2 id="演示如何使用application-yml文件"><a href="#演示如何使用application-yml文件" class="headerlink" title="演示如何使用application.yml文件"></a>演示如何使用application.yml文件</h2><p>1.创建application.yml文件<br>创建一个项目，然后将application.properties文件的名称修改威威application.yml。<br>2.配置application.yml文件<br>在application.yml文件中添加以下代码,以便在测试类中测试获取下面代码配置项的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">   port: 8081</span><br><span class="line">   servlet:</span><br><span class="line">       session:</span><br><span class="line">           timeout: 30</span><br><span class="line">   tomcat:</span><br><span class="line">           uri-encoding: UTF-8</span><br><span class="line">age: 19</span><br><span class="line">name: zhaodaobao</span><br><span class="line">personinfo: </span><br><span class="line">    name: zhaoxiaobao</span><br><span class="line">    age: 3</span><br></pre></td></tr></table></figure>
<p>代码解释如下。<br>•server:定义服务器的配置<br>•port:定义要访问的端口是”8081”(默认端口号是8080)<br>•”timeout:30”:定义Session的超时时间是30S。<br>•”uri-encoding:UTF-8”:定义URI编码是UTF-8格式。<br>3.编写测试<br>编写测试,用于获取配置文件中的配置项的值，并调用前缀为”personinfo”的配置项的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class propertTest&#123;</span><br><span class="line">	&#x2F;&#x2F;获取配置文件中的age</span><br><span class="line">	@Value(&quot;$&#123;age&#125;&quot;)</span><br><span class="line">	private int age;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取配置文件中的name</span><br><span class="line">	@Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="line">	private String name;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;该注解表示一个测试方法</span><br><span class="line">	@Test</span><br><span class="line">	public void getAge()&#123;</span><br><span class="line">		System.out.print(age);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;该注解表示一个测试方法</span><br><span class="line">	@Test</span><br><span class="line">	public void getName()&#123;</span><br><span class="line">		System.out.print(name);</span><br><span class="line">	&#125;			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释如下。<br>•@SpringBootTest: 用于测试的注解，可指定入口类或测试环境等。<br>•@RunWith(SpringRunner.class): 在Spring测试环境中进行测试。<br>•@Test: 表示一个测试方法<br>•@Value: 获取配置文件中的值。<br>在运行测试方法getAge后，输出以下内容:<br><code>19</code><br>在运行测试方法getName后，输出以下内容:<br><code>zhaodaobao</code><br>4.新建GetPersonInfoProperties类<br>定义一个实体类，以装载配置文件的信息。并用于处理配置文件中以”personinfo”为前缀的配置项的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix&#x3D;&quot;personinfo&quot;)</span><br><span class="line">public class GetPersoninfoProperties&#123;</span><br><span class="line">       private String name;</span><br><span class="line">       private int age;</span><br><span class="line">       public String getName()&#123;</span><br><span class="line">	return name;</span><br><span class="line">       &#125;</span><br><span class="line">       public void setName(String name)&#123;</span><br><span class="line">	this.name &#x3D; name;</span><br><span class="line">       &#125;</span><br><span class="line"> 	public int getAge()&#123;</span><br><span class="line">	return age</span><br><span class="line">       &#125;</span><br><span class="line">       public void setAge(int age)&#123;</span><br><span class="line">	this.age &#x3D; age;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释如下。<br>•@Component:声明此类是Spring管理类，常用在无法用@Service、@Repository描述的Spring管理类上，相当于通用的注解<br>•@ConfigurationProperties:把同类配置信息自动封装成一个实体类。其属性prefix代表配置文件中配置项的前缀，如在配置文件中定义”personinfo”。<br>&nbsp;&nbsp;还可以把@ConfigurationProperties直接定义在@Bean的注解里，这时Bean实体类就不需要@Component和@ConfigurationProperties注解了，在调用时依然一样调用。如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">     @ConfigurationProperties(prefix&#x3D;&quot;personinfo&quot;)</span><br><span class="line">     public GetPersoninfoProperties getPersoninfoProperties()&#123;</span><br><span class="line">	return new GetPersoninfoProperties();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.获取配置项”personinfo”的值<br>&nbsp;&nbsp;以下代码演示如何注入GetPersoninfoProperties类，并获取配置项”personinfo”里的name和age的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private GetPersoninfoProperties getPersoninfoProperties;</span><br><span class="line">@Test</span><br><span class="line">public void getpersonproperties()&#123;</span><br><span class="line">	System.out.println(getPersoninfoProperties.getName()+getPersoninfoProperties.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在运行getPersoninfoProperties方法后,输出如下:<br><code>zhaoxiaobao3</code></p>
<h2 id="演示如何使用application-properties文件"><a href="#演示如何使用application-properties文件" class="headerlink" title="演示如何使用application.properties文件"></a>演示如何使用application.properties文件</h2><h2 id="用application-yml和application-properties配置多环境"><a href="#用application-yml和application-properties配置多环境" class="headerlink" title="用application.yml和application.properties配置多环境"></a>用application.yml和application.properties配置多环境</h2><p>————————————</p>
<h1 id="SpringBoot的Starter"><a href="#SpringBoot的Starter" class="headerlink" title="SpringBoot的Starter"></a><strong><em>SpringBoot的Starter</em></strong></h1><h2 id="了解Starter"><a href="#了解Starter" class="headerlink" title="了解Starter"></a>了解Starter</h2><h2 id="使用Starter"><a href="#使用Starter" class="headerlink" title="使用Starter"></a>使用Starter</h2>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>配置</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>初识SpringBoot</title>
    <url>/2020/07/04/%E5%88%9D%E6%97%B6SpringBoot/</url>
    <content><![CDATA[<p>搭建我的第一个Spring Boot项目</p>
<a id="more"></a>
<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a><strong><em>项目搭建</em></strong></h1><h2 id="使用命令创建Maven"><a href="#使用命令创建Maven" class="headerlink" title="使用命令创建Maven"></a>使用命令创建Maven</h2><p>在cmd窗口中执行以下命令：<br><code>mvn archetype:generate -DgroupId=org.sang -DartifactId=&lt;项目名称&gt;
-DarchetypeArtifactId =maven-archetype-quickstart -DinteractiveMode=false</code><br>命令解释：<br>• -Dgroupld 组织 Id （项目包名）。<br>• -Dartifactld Artifactld （项目名称或者模块名称）．<br>• -DarchetypeArtifactld 项目骨架。<br>• -DinteractiveMode 是否使用 交互模式<br>使用命令将项目创建好之后,直接用 Eclipse 或者 IntelliJ IDEA 打开即可。</p>
<h2 id="使用IDEA创建Maven"><a href="#使用IDEA创建Maven" class="headerlink" title="使用IDEA创建Maven"></a>使用IDEA创建Maven</h2><p>1.创建项目时选择Maven，可以不选择项目骨架,单击Next<br>2.输入组织名称、模块名称、项目版本号等信息<br>3.选择项目位置,然后单机Finish按钮，完成项目搭建</p>
<h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a><strong><em>项目构建</em></strong></h1><h2 id="添加侬赖"><a href="#添加侬赖" class="headerlink" title="添加侬赖"></a>添加侬赖</h2><p>首先添加 spring-boot-starter-parent 作为 parent， 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt; </span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactid&gt;spring-boot-starter-parent&lt;&#x2F;artifactid&gt;</span><br><span class="line">	&lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure>
<p>spring-boot-starter-parent是一个特殊的 Starter,提供了一些 Maven 的默认配置,同时还提供了 dependency-management,可以便开发者在引入其他依赖时不必输入版本号,方便依赖管理。 Spring Boot 中提供的 Starter 非常多，这些 Starter 主要为第三方库提供自动配置，例如要开发一个 Web 项目，就可以先引入一个 Web 的 Starter，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">	&lt;groupid&gt;org.springframework.boot&lt;&#x2F;groupid&gt;</span><br><span class="line">	&lt;artifactid&gt;spring-boot-starter-web&lt;&#x2F;artifactid&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<h2 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h2><p>接下来创建项目的入口类，在 Maven 工程的 java 目录下创建项目的包，包里创建一个 App 类， 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EnableAutoConfiguration </span><br><span class="line">   public class App &#123; </span><br><span class="line">       public static void main (String [] args) &#123; </span><br><span class="line">	SpringApplication.run (App.class, args); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释：<br>•@EnableAutoConfiguration 注解表示开启自动化配直。 由于项目中添加了 spring-boot-starterweb 依赖， 因此在开启了自动化配置之后会自动进行 Spring 和 SpringMVC 的配置。<br>•在 Java 项目的 main 方法中，通过 SpringApplication 中的 m 方法启动项目 。 第一个参数传入 App.class，告诉 Spring 哪个是主要组件。第二个参数是运行时输入的其他参数。<br>接下来创建一个 SpringMVC 中的控制器一－HelloController，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController public class HelloController &#123; </span><br><span class="line">	@GetMapping (&quot;&#x2F;hello&quot;) </span><br><span class="line">	public String hello () &#123; </span><br><span class="line">	return &quot;hello spring boot !&quot;; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在控制器中提供了一个“／hello”接口，此时需要配置包扫描才能将 HelloController注册到 Spring MVC 容器中，因此在 App 类上面再添加一个注解＠ComponentScan 进行包扫描，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan</span><br><span class="line">public class App&#123;</span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">	        SpringApplication.run(App.class,args):</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以直接使用组合注解＠Spring BootApplication 来代替＠EnableAutoConfiguration 和 @ComponentScan， 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class App&#123;</span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">	        SpringApplication.run(App.class,args):</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h1><p>启动项目有三种不同的方式<br>1.使用Maven命令启动<br>可以直接使用 mvn 命令启动项目，命令如下：<br><code>mvn spring-boot:run</code><br>启动成功后，在浏览器地址栏输入“localhost:8080/hello”即可看到运行结果<br>2.直接运行main方法<br>直接在 IDE 中运行 App 类的 main 方法，就可以看到项目启动了<br>启动成功后，也可以在浏览器中直接访问／hello 接口。<br>3.打包启动<br>当然， Spring Boot 应用也可以直接打成jar 包运行。在生产环境中，也可以通过这样的方式来 运行一个 Spring Boot 应用。要将 Spring Boot 打成 jar 包运行，首先需要添加一个 plugin 到 pom.xml 文件中，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt; </span><br><span class="line">&lt;plugins&gt; </span><br><span class="line">&lt;plugin&gt; </span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; </span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt; </span><br><span class="line">&lt;&#x2F;plugin&gt; </span><br><span class="line">&lt;&#x2F;plugins&gt; </span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<p>然后运行 mvn 命令进行打包，代码如下：<br><code>mvn package</code><br>打包完成后，在项目的 target 目录下会生成一个 jar 文件，通过<code>java -jar</code> 命令直接启动这个 jar 文件.</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>项目搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Web开发</title>
    <url>/2020/07/07/SpringBoot%E6%95%B4%E5%90%88Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>SpringBoot与Web的整活</p>
<a id="more"></a>
<h1 id="应用程序分层开发模式——MVC"><a href="#应用程序分层开发模式——MVC" class="headerlink" title="应用程序分层开发模式——MVC"></a><strong><em>应用程序分层开发模式——MVC</em></strong></h1><p>自己百度，此不赘述</p>
<h1 id="视图层技术"><a href="#视图层技术" class="headerlink" title="视图层技术"></a><strong><em>视图层技术</em></strong></h1><h2 id="整合Thymeleaf"><a href="#整合Thymeleaf" class="headerlink" title="整合Thymeleaf"></a>整合Thymeleaf</h2><h3 id="认识Thymeleaf"><a href="#认识Thymeleaf" class="headerlink" title="认识Thymeleaf"></a>认识Thymeleaf</h3><p>&nbsp;&nbsp;Thymeleaf是新一代 Java 模板引擎，类似于 Velocity、 FreeMarker等传统 Java 模板引擎.与传统 Java 模板引擎不同的是， Thymeleaf支持HTML 原型，既可以让前端工程师在浏览器中直接打开查看样式， 也可以让后端工程师结合真实数据查看显示效果。 同时， Spring Boot 提供了 Thymeleaf 自动化配置解决方案，因此在 Spring Boot 中使用 Thymeleaf非常方便。 SpringBoot整合Thymeleaf主要可通过如下步骤：<br>1.创建工程，添加依赖<br>&nbsp;&nbsp;新建一个SpringBoot工程，然后添加spring-boot-starter-web和spring-boot-starter-thymeleaf依赖，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2.配置Thymeleaf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line">    prefix: classpath:&#x2F;templates&#x2F;</span><br><span class="line">    suffix: .html</span><br></pre></td></tr></table></figure>
<p>3.配置控制器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.pro;</span><br><span class="line"></span><br><span class="line">import cn.Entity.UserBean;</span><br><span class="line">import cn.service.userService;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private userService userService;</span><br><span class="line"></span><br><span class="line"> @RequestMapping(&quot;&#x2F;userlist&quot;)</span><br><span class="line">    public ModelAndView userlist()&#123;</span><br><span class="line">        ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line">        List&lt;UserBean&gt; ls &#x3D; this.getUserList();</span><br><span class="line">        mv.setViewName(&quot;listUser&quot;);</span><br><span class="line">        mv.addObject(&quot;userlList&quot;,ls);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;UserBean&gt; getUserList()&#123;</span><br><span class="line">        List&lt;UserBean&gt; ls &#x3D; userService.findAll();</span><br><span class="line">        return ls;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.创建视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;Id&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr th:each&#x3D;&quot;sl:$&#123;userlList&#125;&quot;&gt;</span><br><span class="line">    &lt;td th:text&#x3D;&quot;$&#123;sl.id&#125;&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td th:text&#x3D;&quot;$&#123;sl.userName&#125;&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>5.运行<br>然后在浏览器中输入” <a href="http://localhost:8080/boot2/userlist" target="_blank" rel="noopener">http://localhost:8080/boot2/userlist</a> “ ,即可看到数据库中的变化<br>(不推荐使用)</p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a><strong><em>文件上传</em></strong></h1><p>&nbsp;&nbsp;SpringMvc对文件上传做了简化,在SpringBoot中对此做了更进一步的简化,文件上传更为方便.<br>&nbsp;&nbsp;Java中的文件上传一共涉及两个组件,一个是CommonsMultipartResolver,另一个是StandardServletMultipartResolver,其中CommonsMultipartResovler使用commons-fileupload来处理multipart请求,而StandardServletMultipartResolver则是基于Servlet 3.0来处理multipart请求的,因此若使用StandardServletResolver,则不需要额外的jar包.Tomcat 7.0 就支持servlet 3.0 了而SpringBoot 2.0.4 内嵌的 Tomcat 为 Tomcat 8.5.32 ，因此可以直接使用 StandardServletMultipartResolver。 而在 Spring Boot提供的文件上传自动化配置类MultipartAutoConfiguration 中，默认也是采用 StandardServletMultipartResolver，部分源码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MultipartAutoConfiguration &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean(&#123;MultipartConfigElement.class, CommonsMultipartResolver.class&#125;)</span><br><span class="line">    public MultipartConfigElement multipartConfigElement() &#123;</span><br><span class="line">        return this.multipartProperties.createMultipartConfig();</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean(</span><br><span class="line">        name &#x3D; &#123;&quot;multipartResolver&quot;&#125;</span><br><span class="line">    )</span><br><span class="line">    @ConditionalOnMissingBean(&#123;MultipartResolver.class&#125;)</span><br><span class="line">    public StandardServletMultipartResolver multipartResolver() &#123;</span><br><span class="line">        StandardServletMultipartResolver multipartResolver &#x3D; new StandardServletMultipartResolver();</span><br><span class="line">        multipartResolver.setResolveLazily(this.multipartProperties.isResolveLazily());</span><br><span class="line">        return multipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;根据这里的配置可以看出，如果开发者没有提供 MultipartResolver ，那么 默认采用的 MultipartResolver 就是 StandardServletMultipartResolver. 因此，在 Spring Boot 中上传文件甚至可以 做到零配置。下面来看具体上传过程。</p>
<h2 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h2><p>&nbsp;&nbsp;首先创建一个SpringBoot项目并添加spring-boot-starter-web依赖.<br>&nbsp;&nbsp;然后在resource目录下的static目录中创建一个upload.html文件,内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;boot2&#x2F;upload&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;uploadFile&quot; value&#x3D;&quot;请选择您的文件&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;这是一个很简单的文件上传页面,上传接口时/upload,注意请求方法是post,enctype是multipart/form-data。<br>&nbsp;&nbsp;接着创建文件上传处理接口,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class uploadController &#123;</span><br><span class="line">    SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy&#x2F;MM&#x2F;dd&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">    @PostMapping(value &#x3D; &quot;&#x2F;upload&quot;)</span><br><span class="line">    public String upload(MultipartFile uploadFile, HttpServletRequest request)&#123;</span><br><span class="line">        String realPath &#x3D; request.getSession().getServletContext().getRealPath(&quot;&#x2F;uploadFile&#x2F;&quot;);</span><br><span class="line">        File folder &#x3D; new File(realPath);</span><br><span class="line">        if(!folder.isDirectory())&#123;</span><br><span class="line">            folder.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        String oldName &#x3D; uploadFile.getOriginalFilename();</span><br><span class="line">        String newName &#x3D; UUID.randomUUID().toString()+oldName.substring(oldName.lastIndexOf(&quot;.&quot;),oldName.length());</span><br><span class="line">        try &#123;</span><br><span class="line">            uploadFile.transferTo(new File(folder,newName));</span><br><span class="line">            String filePath &#x3D; request.getScheme()+&quot;:&#x2F;&#x2F;&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+request.getContextPath()+&quot;&#x2F;uploadFile&#x2F;&quot; +newName;</span><br><span class="line">            return filePath;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;上传失败!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释如下:<br>• 6-11代码表示规划上传文件的保存路径为项目运行目录下的uploadFile文件夹,并在文件夹中通过日期对所上传的文件归类保存。<br>• 12-13代码表示给上传的文件重命名,这是为了避免文件重名.<br>• 15代码是文件保存操作<br>• 16-17是生成上传文件的访问路径,并将访问路径返回.</p>
<p>如果开发者需要对图片上传的细节进行配置,也是允许的,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.servlet.multipart.enabled&#x3D;true</span><br><span class="line">spring.servlet.multipart.file-size-threshold&#x3D;0</span><br><span class="line">spring.servlet.multipart.location&#x3D;E: \\temp</span><br><span class="line">spring.servlet.multipart.max-file-size&#x3D;1MB</span><br><span class="line">spring.servlet.multipart.max-request-size&#x3D;10MB</span><br><span class="line">spring.servlet.multipart.resolve-lazily&#x3D;false</span><br></pre></td></tr></table></figure>
<p>代码解释:<br>•第1行表示是否开启文件上传支持,默认为true。<br>•第2行表示文件写入磁盘的阈值,默认为0。<br>•第3行表示上传文件的临时保存位置。<br>•第4行表示上传的单个文件的最大大小,默认为1MB。<br>•第5行表示多文件上传时文件的总大小,默认为10MB。<br>•第6行表示文件是否延迟解析,默认为false。</p>
<h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><p>多文件上传和单文件上传基本一致,首先修改HTML文件,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;boot2&#x2F;uploads&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;uploadFiles&quot; value&#x3D;&quot;请选择您的文件&quot; multiple&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>然后修改控制器,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;uploads&quot;)</span><br><span class="line">public String upload(MultipartFile[] uploadFiles, HttpServletRequest request)&#123;</span><br><span class="line">&#x2F;&#x2F;遍历uploadFile数组分别存储</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制器里边的核心逻辑和单文件上传是一样的,只是多一个遍历的步骤。</p>
<h1 id="返回JSON数据"><a href="#返回JSON数据" class="headerlink" title="返回JSON数据"></a><strong><em>返回JSON数据</em></strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@JsonIgnore 忽略该属性，不返回此处JSON</span><br><span class="line">@JsonFormat(&quot;pattern&#x3D;yyyy-MM-dd&quot;) 格式化日期</span><br></pre></td></tr></table></figure>
<p>设置时区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jackson: </span><br><span class="line">   time-zone:GMT+8</span><br></pre></td></tr></table></figure>
<h1 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a><strong><em>@ControllerAdvice</em></strong></h1><p>&nbsp;&nbsp;顾名思义,@ControllerAdvice就是@Controller的增强版.@ControllerAdvice主要用来处理全局数据,一般搭配@ExceptionHandler、@ModelAttribute以及@InitBinder使用.</p>
<h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><p>&nbsp;&nbsp;@ControllerAdvice最常见的使用场景就是全局异常处理。在之前介绍过文件上传大小限制的配置，如果用户上传的文件超过了限制大小，就会抛出异常，此时可以通过 @ControllerAdvice结合＠ExceptionHandler定义全局异常捕获机制,代码如下(返回参数为ModelAndView):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class exceptioinController &#123;</span><br><span class="line">    @ExceptionHandler(MaxUploadSizeExceededException.class)</span><br><span class="line">    public ModelAndView uploadException(MaxUploadSizeExceededException e)throws IOException &#123;</span><br><span class="line">        ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line">        mv.addObject(&quot;msg&quot;,&quot;上传文件大小超出限制!&quot;);</span><br><span class="line">        mv.setViewName(&quot;error&quot;);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 resources/templates 目录下创建error.html 文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="添加全局数据"><a href="#添加全局数据" class="headerlink" title="添加全局数据"></a>添加全局数据</h2><p>@ControllerAdvice 是一个全局数据处理组件, 因此也可以在＠ControllerAdvice 中配置全局数据,使用＠ModelAttribute注解进行配置，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class exceptioinController &#123;</span><br><span class="line">    @ModelAttribute(value &#x3D; &quot;info&quot;)</span><br><span class="line">    public Map&lt;String,String&gt; userInfo()&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;username&quot;,&quot;章承恩&quot;);</span><br><span class="line">        map.put(&quot;gender&quot;,&quot;美猴王&quot;);</span><br><span class="line">        return map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释:<br>•在全局配置中添加userInfo方法,返回一个map.该方法有一个注解@ModelAttribute,其中的value属性表示这条返回数据的key,而方法的返回值时返回数据的value.<br>•此时在任意请求的Controller中,通过方法参数中的Model都可以获取info的数据.<br>Controller实例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;CNM&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public void cnm(Model model)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map &#x3D; model.asMap();</span><br><span class="line">        Set&lt;String&gt; keySet &#x3D; map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iterator &#x3D; keySet.iterator();</span><br><span class="line">        while(iterator.hasNext())&#123;</span><br><span class="line">            String key  &#x3D; iterator.next();</span><br><span class="line">            Object value &#x3D; map.get(key);</span><br><span class="line">            System.out.println(key+&quot;》》》&quot;+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;在请求方法中,将Model中的数据打印出来,如下:<br><code>info》》》{gender=美猴王,username=章承恩}</code></p>
<h2 id="请求参数预处理"><a href="#请求参数预处理" class="headerlink" title="请求参数预处理"></a>请求参数预处理</h2><p>&nbsp;&nbsp;@ControllerAdvice结合＠InitBinder还能实现请求参数预处理,即将表单中的数据绑定到实体类上时进行一些额外处理.</p>
<h1 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a><strong><em>自定义错误页面</em></strong></h1><h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>&nbsp;&nbsp;自定义错误界面其实很简单,提供4xx.html和5xx.html等页面即可。如果没有必要向用户展示详细的错误信息,也可以将错误信息定义为静态页面。直接在resources/static目录下创建error目录，然后在error目录中创建错误展示页面。<br>&nbsp;&nbsp;这种定义都是使用了静态 HTML 页面，无法向用户展示完整的错误信息，若采用视图模板技 术，则可以向用户展示更多的错误信息。如果要使用 HTML 模板，那么先引入模板相关的依赖， 这里以 Thymeleaf为例， Thymeleaf页面模板默认处于 classpath:/templates／目录下，因此在该目录下 先创建 error 目录，再创建错误展示页.</p>
<h2 id="复杂配置"><a href="#复杂配置" class="headerlink" title="复杂配置"></a>复杂配置</h2><p>&nbsp;&nbsp;上面这种配置还是不够灵活， 只能定义 HTML 页面，无法处理 JSON 的定制。 Spring Boot 中 支持对 Error 信息的深度定制， 接下来将从三个方面介绍深度定制： 自定义 Error 数据、自定义 Error 视图以及完全自定义。<br>1.自定义Error数据<br>&nbsp;&nbsp;自定义 Error 数据就是对返回的数据进行自定义。Spring Boot 返回的 Error 信息一共有 5 条，分别是 timestamp、 status、 error、 message 以及 path。在 BasicErrorController 的 errorHtml 方法和 error 方法中，都是通过 getErrorAttributes 方法获取 Error 信息的。该方法最终会调用到 DefaultErrorAttributes 类的 getErrorAttributes 方法 ，而 DefaultErrorAttributes 类是在 ErrorMvcAutoConfiguration 中默认提供的。ErrorMvcAutoConfiguration 类的 errorAttributes 方法源码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean(value&#x3D;ErrorAttributes.class,search&#x3D;SearchStratrgy.CURRENT)</span><br><span class="line">public DefaultErrorAttributes errorAttributes()&#123;</span><br><span class="line">	return new DefaultErrorAttributes(</span><br><span class="line">		this.serverProperties.getError().isIncludeException());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;从这段源码中可以看出，当系统没有提供 ErrorAttributes 时才会采用 DefaultErrorAttributes。 因此自定义错误提示时，只需要自己提供一个 ErrorAttributes 即可，而 DefaultErrorAttributes 是 ErrorAttributes 的子类，因此只需要继承 DefaultErrorAttributes 即可，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component </span><br><span class="line">public class MyErrorAttribute extends DefaultErrorAttributes&#123; </span><br><span class="line">	@Override </span><br><span class="line">	public Map&lt;String, Object&gt; getErrorAttributes(WebRequest webRequest, boolean includeStackTrace) &#123; </span><br><span class="line">		Map&lt;String, Object&gt; errorAttributes &#x3D; super.getErrorAttributes(webRequest, includeStackTrace); </span><br><span class="line">		errorAttributes.put(&quot;custommsg&quot;,&quot;出错啦!&quot;); </span><br><span class="line">		errorAttributes.remove(&quot;error&quot;); </span><br><span class="line">		return errorAttributes;</span><br></pre></td></tr></table></figure>
<p>代码解释:<br>•自定义 MyErrorAttribute 继承自 DefaultErrorAttributes ，重写 DefaultErrorAttributes 中的 getErrorAttributes 方法。 MyErrorAttribute 类添加＠Component 注解，该类将被注册到 Spring 容器中。<br>•第5行通过 super.getErrorAttributes 获取 Spring Boot 默认提供的错误信息，然后在此基础 上添加 Error 信息或者移除 Error 信息。<br>此时，当系统抛出异常时，错误信息将被修改，以 动态页面模板 404.html 为例， 修改 404.html，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p th:text&#x3D;&quot;$&#123;custommsg&#125;&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;在第8行修改为了custommsg属性，此时访问一个不存在的路径，就能看到自定义的Error信息，并且可以看到默认的error被移除了。<br>2.自定义Error视图<br>3.完全自定义</p>
<h1 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a><strong><em>静态资源访问</em></strong></h1><h2 id="默认策略"><a href="#默认策略" class="headerlink" title="默认策略"></a>默认策略</h2><p>&nbsp;&nbsp;Spring Boot 中对于 SpringMVC 的 自动化配置都在 WebMvcAutoConfiguration 类中 ，因此对于 默认的静态资源过滤策略可以从这个类中一窥究竟。<br>&nbsp;&nbsp;在 WebMvcAutoConfiguration 类中有一个静态内部类 WebMvcAutoConfigurationAdapter， 实现 了 4.1 节提到的 WebMvcConfigurer 接口。 WebMvcConfigurer 接口中有一个方法 addResourceHandlers, 是用来配置静态资源过滤的。方法在 WebMvcAutoConfigurationAdapter 类中得到了实现。<br>&nbsp;&nbsp;Spring Boot 在这里进行了默认的静态资源过滤配置，其中 staticPathPattern 默认定义在 WebMvcProperties 中，定义内容如下：<br><code>private String staticPathPattern = &quot;/**&quot;,</code><br>this.resourceProperties.getStaticLocations()获取到的默认静态资源位置定义在ResourceProperties中,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static final String[] CLASSPATH_RESOURCE_LOCATIONS &#x3D; &#123;</span><br><span class="line">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;,&quot;classpath:&#x2F;resources&#x2F;&quot;,&quot;classpath:&#x2F;static&#x2F;&quot;,&quot;classpath:&#x2F;public&#x2F;&quot;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>
<p>&nbsp;在getResourcesLocations方法中,对这4个静态资源位置做了扩充,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static String getResourceLocations(String[] staticLocations)&#123;</span><br><span class="line">String[] locations &#x3D; new String[staticLocations.length+SERVLET_LOCATIONS.length];</span><br><span class="line">System.arraycopy(staticlocations,0,locations,0,staticLocations.length);</span><br><span class="line">System.arraycopy(SERVLET_LOCATIONS,0,locations,0,staticLocations.length,</span><br><span class="line">SERVLET_LOCATIONS.length);</span><br><span class="line">      return locations;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;其中,SERVLET_LOCATIONS 的定义是一个｛”/“｝ 。<br>&nbsp;&nbsp;综上可以看到， Spring Boot 默认会过滤所有的静态资源， 而静态资源的位置一共有 5 个，分 别是”classpath:/META-INF/resources/“、”classpath:/resources/“、”classpath:/static/“、 “classpath:/public/“ 以及”/“也就是说，开发者可以将静态资源放到这 5 个位置中的任意一个。 注意， 按照定义的顺 序， 5 个静态资源位置的优先级依次降低。 但是一般情况下， Spring Boot 项目不需要 webapp 目录， 所以第 5 个”/“可以暂不考虑。<br>&nbsp;&nbsp;在一个新创建的 Spring Boot 项 目中， 添加了 spring-boot-starter-web 依赖之后， 在 resources 目 录下分别创建 4 个目 录， 4 个目 录中放入同名的静态资源。<br>&nbsp;&nbsp;此时,在浏览器中输入”<a href="http://localhost:8080/p1.png" target="_blank" rel="noopener">http://localhost:8080/p1.png</a> “ 即可看到 classpath:/META-INF /resources/ 目 录下的 p1.png，如果将 classpath:/META-INF/resources/目录下的 p1.png 删除，就会访问到 classpath:/resources/目录下的 p1.png,以此类推。<br>&nbsp;&nbsp;如果开发者使用 IntelliJ IDEA 创建 Spring Boot 项目， 就会默认创建出 classpath:/static/目录,静态资源一般放在这个目录下即可。</p>
<h2 id="自定义策略"><a href="#自定义策略" class="headerlink" title="自定义策略"></a>自定义策略</h2><p>&nbsp;&nbsp;如果默认的资源过滤策略不能满足开发需求,也可以自定义静态资源过滤策略,自定义静态资源过滤策略有以下两种方式:<br>1.在配置文件中定义<br>可以在application.properties中直接定义过滤规则和静态资源位置,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.mvc.static-path-pattern&#x3D;&#x2F;static&#x2F;**</span><br><span class="line">spring.resources.static-locations&#x3D;classpath:&#x2F;static&#x2F;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;过滤规则为/static/**,静态资源位置为classpath:/static/.<br>&nbsp;&nbsp;重新启动项目,在浏览器中输入”<a href="http://localhost:8080/static/p1.png&quot;,即可看到classpath:/static/目录下的资源" target="_blank" rel="noopener">http://localhost:8080/static/p1.png&quot;,即可看到classpath:/static/目录下的资源</a>.<br>2.Java编码定义<br>&nbsp;&nbsp;也可以通过Java编码方式来定义,此时只需要实现WebMvcConfigurer接口即可,然后实现该接口的addResourceHandlers方法,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class MyWebMvcConfig implements WebMvcConfigurer&#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void addResourceHandlers(ResourceHandlerRegistry registry)&#123;</span><br><span class="line">	registry	</span><br><span class="line">	          .addResourceHandler(&quot;&#x2F;static&#x2F;**&quot;)</span><br><span class="line">	          .addResourceLocations(&quot;&#x2F;classpath:&#x2F;static&#x2F;&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;重新启动项目,在浏览器中输入” <a href="http://localhost:8080/statuc/p1.png" target="_blank" rel="noopener">http://localhost:8080/statuc/p1.png</a> “,即可看到classpath:/static/目录下的资源.</p>
<h1 id="CORS支持"><a href="#CORS支持" class="headerlink" title="CORS支持"></a><strong><em>CORS支持</em></strong></h1><p>&nbsp;&nbsp;CORS(Cross-Origin Resource Sharing)是由W3C制定的一种跨域资源共享技术标准,其目的就是为了解决前端的跨域请求.在Java EE开发中,最常见的前端跨域请求解决方案是JSONP,但是JSONP只支持GET请求,这是一个很大的缺陷,而CORS则支持多种HTTP请求方法.以CORS中的GET请求为例,当浏览器发起请求时,请求头中携带了如下信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Origin: http:&#x2F;&#x2F;localhost:8081</span><br><span class="line">Referer: http:&#x2F;&#x2F;localhost:8081&#x2F;index.html</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;假如服务端支持CORS,则服务端给出的响应信息如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;localhost:8081</span><br><span class="line">Content-Length: 20</span><br><span class="line">Content-Type: text&#x2F;plain;charset&#x3D;UTF-8</span><br><span class="line">Date: Thu, 12 Jul 2020 12:12:32 GMT</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在SpringBoot中配置CORS的步骤如下:<br>1.创建SpringBoot工程<br>&nbsp;&nbsp;首先创建一个SpringBoot工程,添加Web依赖,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3.1.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2.创建控制器<br>&nbsp;&nbsp;在新创建的SpringBoot工程中,添加一个BookController控制器,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;book&quot;)</span><br><span class="line">public class BookController &#123;</span><br><span class="line">    @PostMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    public String addBook(String name)&#123;</span><br><span class="line">        return &quot;receive:&quot;+name;</span><br><span class="line">    &#125;</span><br><span class="line">    @DeleteMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public String deleteBookById(@PathVariable Long id)&#123;</span><br><span class="line">        return String.valueOf(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;BookController中提供了两个接口:一个是添加接口,另一个是删除接口.<br>3.配置跨域<br>&nbsp;&nbsp;跨域有两个地方可以配置.一个是直接在相应的请求方法上加注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;book&quot;)</span><br><span class="line">public class BookController &#123;</span><br><span class="line">    @PostMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    @CrossOrigin(value &#x3D; &quot;http:&#x2F;&#x2F;localhost:8080&quot;,maxAge &#x3D; 1800,allowedHeaders &#x3D; &quot;*&quot;)</span><br><span class="line">    public String addBook(String name)&#123;</span><br><span class="line">        return &quot;receive:&quot;+name;</span><br><span class="line">    &#125;</span><br><span class="line">    @DeleteMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    @CrossOrigin(value &#x3D; &quot;http:&#x2F;&#x2F;localhost:8080&quot;,maxAge &#x3D; 1800,allowedHeaders &#x3D; &quot;*&quot;)</span><br><span class="line">    public String deleteBookById(@PathVariable Long id)&#123;</span><br><span class="line">        return String.valueOf(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释:<br>•@CrossOrigin中的value表示支持的域,这里表示来自<a href="http://localhost:8080域的请求是支持跨域的">http://localhost:8080域的请求是支持跨域的</a>.<br>•maxAge表示探测请求的有效期,在执行过程中会先发送探测请求，探测请求不用每次都发送,可以配直一个有效期，有效期过了之后才会发送探测请求。这个属性默认是 1800 秒，即 30 分钟。<br>•allowedHeaders表示允许的请求头,*表示所有的请求头都被允许.<br>&nbsp;&nbsp;这种配置方式是一种细粒度的配置,可以控制到每一个方法上.当然,也可以不在每个方法上添加@CrossOrigin注解,而是采用一种全局配置,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class MyWebMvcConfig implements WebMvcConfigurer&#123;</span><br><span class="line">	@Override</span><br><span class="line">	public void addCorsMappings(CorsRegistry registry)&#123;</span><br><span class="line">		registry.addMapping(&quot;&#x2F;book&#x2F;**&quot;)</span><br><span class="line">		        .allowedHeaders(&quot;*&quot;)</span><br><span class="line">		        .allowedMethods(&quot;*&quot;)</span><br><span class="line">		        .maxAge(1800)</span><br><span class="line">		        .allowedOrigins(&quot;http:&#x2F;&#x2F;localhost:8080&quot;);	 </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释:<br>•全局配置需要自定义类实现WebMvcConfigurer接口,然后实现接口中的addCorsMappings方法.<br>•在addCorsMappings方法中,addMapping表示对哪种格式的请求路径进行跨域处理;allowedHeaders表示允许的请求头,默认允许所有的请求头信息;allowedMethods表示允许的请求方法,默认是GET、POST和HEAD; *表示支持所有的请求方法;maxAge表示探测请求的有效期;allowedOrigins表示支持的域.<br>&nbsp;&nbsp;在上面的两种配置方式(@CrossOrigin注解配置和全局配置)中,选择其中一种即可,然后启动项目.<br>4.测试<br>&nbsp;&nbsp;新建一个SpringBoot项目,添加Web依赖,然后再resources/static/js目录下加入jquery.js,再在resources/static目录下创建一个index.html文件,内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;contentDiv&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;deleteResult&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;提交数据&quot; onclick&#x3D;&quot;getData()&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;删除数据&quot; onclick&#x3D;&quot;deleteData()&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;js&#x2F;jquery-3.4.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function deleteData() &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&#39;http:&#x2F;&#x2F;localhost:8081&#x2F;cors&#x2F;book&#x2F;99&#39;,</span><br><span class="line">            type: &#39;delete&#39;,</span><br><span class="line">            success: function (msg) &#123;</span><br><span class="line">                $(&quot;#deleteResult&quot;).html(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    function getData() &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&#39;http:&#x2F;&#x2F;localhost:8081&#x2F;cors&#x2F;book&#x2F;&#39;,</span><br><span class="line">            type: &#39;post&#39;,</span><br><span class="line">            data:&#123;name:&#39;三国演义&#39;&#125;,</span><br><span class="line">            success: function (msg) &#123;</span><br><span class="line">                $(&quot;#contentDiv&quot;).html(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;两个普通的Ajax都发送一个跨域请求.<br>&nbsp;&nbsp;然后将项目的端口修改为8080,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">    port:8080</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;启动项目,在浏览器中输入” <a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a> “,查看页面,然后分别单击两个按钮,查看请求结果.</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>项目搭建</tag>
        <tag>前端</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合持久层技术</title>
    <url>/2020/07/09/Spring%E6%95%B4%E5%90%88%E6%8C%81%E4%B9%85%E5%B1%82%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>在springBoot中玩转MyBatis</p>
<a id="more"></a>
<p>1.创建项目<br>&nbsp;&nbsp;创建SpringBoot项目,添加MyBatis依赖、数据库驱动依赖以及数据库连接池依赖，代码如下:\</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.9&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2.创建数据库、表、实体类等<br>数据库和表、实体类以及application.propertie或application.yml中配置的数据库连接信息都与以前一致，如有疑惑，请翻阅之前博客。<br>3.创建数据库访问层(mapper)<br>创建userDao,代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface userDao &#123;</span><br><span class="line">    public List&lt;UserBean&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释:<br>•在springBoot启动类中加入注解@MapperScan(basePackages = “cn.dao”)扫描到mapper文件的具体所在包下<br>•@SpringBootApplication(scanBasePackages = {“cn.service”,”cn”})扫描service层<br>4.创建userDao-mapper.xml<br>在resources文件夹中创建mapper文件，写入mapper文件的映射文件(xml),代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;cn.dao.userDao&quot;&gt;		&#x2F;&#x2F;指定mapper类所在包</span><br><span class="line">    &lt;select id&#x3D;&quot;findAll&quot; resultType&#x3D;&quot;cn.Entity.UserBean&quot;&gt;</span><br><span class="line">        select * from itrip_user</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>
<p>在application.yml中的配置信息如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line">    prefix: classpath:&#x2F;templates&#x2F;        &#x2F;&#x2F;指定前端页面所在包名</span><br><span class="line">    suffix: .html 		       &#x2F;&#x2F;指定后缀名</span><br><span class="line">  datasource:		       	</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource &#x2F;&#x2F;连接池配置</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver         &#x2F;&#x2F;驱动</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;itrip	           &#x2F;&#x2F;数据库地址	</span><br><span class="line">    username: root		                           &#x2F;&#x2F;用户名</span><br><span class="line">    password:			           &#x2F;&#x2F;密码</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: &#x2F;boot2	&#x2F;&#x2F;项目启动后访问的地址</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:&#x2F;mapper&#x2F;*.xml	&#x2F;&#x2F;mapper映射文件的位置</span><br></pre></td></tr></table></figure>
<p>5.创建Service和Controller<br>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Service</span><br><span class="line">package cn.service;</span><br><span class="line"></span><br><span class="line">import cn.Entity.UserBean;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface userService &#123;</span><br><span class="line">    public List&lt;UserBean&gt; findAll();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;ServiceImpl</span><br><span class="line">package cn.service.Impl;</span><br><span class="line"></span><br><span class="line">import cn.Entity.UserBean;</span><br><span class="line">import cn.dao.userDao;</span><br><span class="line">import cn.service.userService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class userServiceImpl implements userService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private userDao userDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;UserBean&gt; findAll() &#123;</span><br><span class="line">        return userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Controller</span><br><span class="line">package cn.pro;</span><br><span class="line"></span><br><span class="line">import cn.Entity.UserBean;</span><br><span class="line">import cn.service.userService;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line">  @Resource</span><br><span class="line">    private userService userService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;userlist&quot;)</span><br><span class="line">    public ModelAndView userlist()&#123;</span><br><span class="line">        ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line">        List&lt;UserBean&gt; ls &#x3D; this.getUserList();</span><br><span class="line">        mv.setViewName(&quot;listUser&quot;);</span><br><span class="line">        mv.addObject(&quot;userlList&quot;,ls);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;UserBean&gt; getUserList()&#123;</span><br><span class="line">        List&lt;UserBean&gt; ls &#x3D; userService.findAll();</span><br><span class="line">        return ls;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6.配置pom.xml文件<br>&nbsp;&nbsp;在maven工程中，XML配置文件建议写在resources目录下，如果Mapper.xml文件写在包下时，Maven在运行时会忽略包下的XML文件，因此需要在pom.xml文件中重新指明资源文件位置，配置如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">&lt;&#x2F;includes&gt;</span><br><span class="line">&lt;&#x2F;resource&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">&lt;&#x2F;resource&gt;</span><br><span class="line">&lt;&#x2F;resources&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<p>然后在浏览器中输入” <a href="http://localhost:8080/boot2/userlist" target="_blank" rel="noopener">http://localhost:8080/boot2/userlist</a> “ ,即可看到数据库中的变化</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>配置</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
</search>
